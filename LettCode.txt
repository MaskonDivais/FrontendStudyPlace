function createCounter(initialValue) {
    let n = initialValue;

    return function() {
        const result = n;
        n += 1;
        return result;
    };
}

function performCalls(n, calls) {
    const counter = createCounter(n);
    const output = [];

    for (const call of calls) {
        if (call === "call") {
            output.push(counter());
        }
    }

    return output;
}

// Example 1
const n1 = 10;
const calls1 = ["call", "call", "call"];
const output1 = performCalls(n1, calls1);
console.log(output1);  // Output: [10, 11, 12]

// Example 2
const n2 = -2;
const calls2 = ["call", "call", "call", "call", "call"];
const output2 = performCalls(n2, calls2);
console.log(output2);  // Output: [-2, -1, 0, 1, 2]

//====================================================================================================================================================================================================================================//

function sleep(millis) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(millis);
        }, millis);
    });
}

let t1 = Date.now();
sleep(100).then((result) => {
    console.log(result); 
    console.log(Date.now() - t1); 
});

//====================================================================================================================================================================================================================================//

Array.prototype.last = function() {
    if (this.length === 0) {
        return -1;
    } else {
        return this[this.length - 1];
    }
};

const nums1 = [null, {}, 3];
console.log(nums1.last()); 

const nums2 = [];
console.log(nums2.last()); 

//====================================================================================================================================================================================================================================//

var compose = function(functions) {
    
	return function(x) {
        
        for(let i = functions.length-1; i >= 0; --i)
        {
            x = functions[i] (x);
        }
        return x;
    }
};


const fn = compose([ x => x * x, x => x + 1])
console.log(fn(2) );

//====================================================================================================================================================================================================================================//


function customFilter(arr, fn) {
    
    const filteredArr = [];
    
    for (let i = 0; i < arr.length; i++) {
        if (fn(arr[i], i)) {
            filteredArr.push(arr[i]);
        }
    }
    return filteredArr;
}

const arr1 = [0, 10, 20, 30];
const fn1 = function greaterThan10(n) {
    return n > 10;
};
console.log(customFilter(arr1, fn1)); 

const arr2 = [1, 2, 3];
const fn2 = function firstIndex(n, i) {
    return i === 0;
};
console.log(customFilter(arr2, fn2)); 

const arr3 = [-2, -1, 0, 1, 2];
const fn3 = function plusOne(n) {
    return n + 1;
};
console.log(customFilter(arr3, fn3));

//====================================================================================================================================================================================================================================//

function map(arr, fn) {
    const mappedArr = [];
    for (let i = 0; i < arr.length; i++) {
        mappedArr[i] = fn(arr[i], i);
    }
    return mappedArr;
}

// Example 1
const arr1 = [1, 2, 3];
const fn1 = function plusOne(n) {
    return n + 1;
};
console.log(map(arr1, fn1)); // Output: [2, 3, 4]

// Example 2
const arr2 = [1, 2, 3];
const fn2 = function plusI(n, i) {
    return n + i;
};
console.log(map(arr2, fn2)); // Output: [1, 3, 5]

// Example 3
const arr3 = [10, 20, 30];
const fn3 = function constant() {
    return 42;
};
console.log(map(arr3, fn3)); // Output: [42, 42, 42]

//====================================================================================================================================================================================================================================//

function reduce(nums, fn, init) {
    let result = init;

    for (let i = 0; i < nums.length; i++) {
        result = fn(result, nums[i]);
    }

    return result;
}

// Example 1
const nums1 = [1, 2, 3, 4];
const fn1 = function sum(accum, curr) {
    return accum + curr;
};
const init1 = 3;
console.log(reduce(nums1, fn1, init1)); // Output: 13

// Example 2
const nums2 = [1, 2, 3];
const fn2 = function sum(accum, curr) {
    return accum + curr * curr;
};
const init2 = 1;
console.log(reduce(nums2, fn2, init2)); // Output: 15

//====================================================================================================================================================================================================================================//

function* fibGenerator() {
    let current = 0;
    let next = 1;

    for (let i = 0; i < 50; i++) {  // You can adjust the loop limit based on your requirements
        yield current;
        [current, next] = [next, current + next];
    }
}

// Example usage:
const callCount1 = 5;
const gen1 = fibGenerator();
const result1 = Array.from({ length: callCount1 }, () => gen1.next().value);
console.log(result1); // Output: [0, 1, 1, 2, 3]

//====================================================================================================================================================================================================================================//

function createCounter(init) {
    let currentValue = init;

    return {
        increment: function() {
            currentValue++;
            return currentValue;
        },
        decrement: function() {
            currentValue--;
            return currentValue;
        },
        reset: function() {
            currentValue = init;
            return currentValue;
        }
    };
}

// Example 1
const counter1 = createCounter(5);
const result1 = [];
result1.push(counter1.increment()); // Output: [6]
result1.push(counter1.reset());      // Output: [6, 5]
result1.push(counter1.decrement());  // Output: [6, 5, 4]
console.log(result1);

//====================================================================================================================================================================================================================================//

function once(fn) {
    let hasBeenCalled = false;
    let result;

    return function (...args) {
        if (!hasBeenCalled) {
            result = fn(...args);
            hasBeenCalled = true;
            return result;
        } else {
            return undefined;
        }
    };
}

// Example 2
const fn2 = (a, b, c) => (a * b * c);
const calls2 = [[5, 7, 4], [2, 3, 6], [4, 6, 8]];
const onceFn2 = once(fn2);
const result2 = calls2.map(args => ({  value: onceFn2(...args), calls: onceFn2(...args) !== undefined ? 1 : 0 }));
console.log(result2);

//====================================================================================================================================================================================================================================//

var chunk = function(arr, size) {
    let resulrArr = [];
    let sizeArr = size;
    
    for(let i = 0; i < arr.length; i += sizeArr){
        const elemArr = arr.slice(i, i + sizeArr);
        resulrArr.push(elemArr);
    }
    
    return resulrArr;
};

let arr = [1,2,3,4,5], size = 1;
let final = chunk(arr,size);
console.log(final);

//====================================================================================================================================================================================================================================//

class ArrayWrapper {
    constructor(nums) {
        this.nums = nums;
    }

    add(otherArrayWrapper) {
        const combinedArray = this.nums.concat(otherArrayWrapper.nums);
        return new ArrayWrapper(combinedArray);
    }

    toString() {
        return `[${this.nums.join(',')}]`;
    }
}

// Example 1
const nums1 = [[1, 2], [3, 4]];
const operation1 = "Add";
const obj1 = new ArrayWrapper(nums1[0]);
const obj2 = new ArrayWrapper(nums1[1]);
const result1 = obj1.add(obj2);
console.log(result1.toString()); // Output: [1,2,3,4]

// Example 2
const nums2 = [[23, 98, 42, 70]];
const operation2 = "String";
const obj3 = new ArrayWrapper(nums2[0]);
const result2 = obj3.toString();
console.log(result2); // Output: "[23,98,42,70]"

// Example 3
const nums3 = [[], []];
const operation3 = "Add";
const obj4 = new ArrayWrapper(nums3[0]);
const obj5 = new ArrayWrapper(nums3[1]);
const result3 = obj4.add(obj5);
console.log(result3.toString()); // Output: "[]"

//====================================================================================================================================================================================================================================//

var ArrayWrapper = function(nums) {
    this.nums = nums;
};

ArrayWrapper.prototype.valueOf = function() {
    return this.nums.reduce((sum, num) => sum + num, 0);
};

ArrayWrapper.prototype.toString = function() {
    return `[${this.nums.join(',')}]`;
};

// Example usage:
const obj1 = new ArrayWrapper([1, 2]);
const obj2 = new ArrayWrapper([3, 4]);

// Using the `valueOf` method to get the sum of elements
console.log(obj1 + obj2); // Output: 10

// Using the `toString` method to get the string representation
console.log(String(obj1)); // Output: "[1,2]"
console.log(String(obj2)); // Output: "[3,4]"

//====================================================================================================================================================================================================================================//

var createHelloWorld = function() {
    return function(...args) {
        return "Hello World"; 
    }
};

// Example
const f = createHelloWorld();
console.log(f()); // Output: "Hello World"
console.log(f({}, null, 42)); // Output: "Hello World"

//====================================================================================================================================================================================================================================//

function expect(value) {
    return {
        toBe: function(compareValue) {
            if (value === compareValue) {
                return true ;
            } else {
                throw new Error("Not Equal");
            }
        },
        notToBe: function(compareValue) {
            if (value !== compareValue) {
                return true ;
            } else {
                throw new Error("Equal");
            }
        }
    };
}


// Example 1
const func1 = () => expect(5).toBe(5);
console.log(func1()); // Output: {"value": true}

// Example 2
try {
    const func2 = () => expect(5).toBe(null);
    console.log(func2()); // This should throw an error
} catch (error) {
    console.log({ error: error.message }); // Output: {"error": "Not Equal"}
}

// Example 3
const func3 = () => expect(5).notToBe(null);
console.log(func3()); // Output: {"value": true}

//====================================================================================================================================================================================================================================//

function isEmpty(obj) {
    if (Array.isArray(obj)) {
        return obj.length === 0;
    } else if (typeof obj === 'object' && obj !== null) {
        return Object.keys(obj).length === 0;
    } else {
        return false;
    }
}

// Example 1
const obj1 = {"x": 5, "y": 42};
console.log(isEmpty(obj1)); // Output: false

// Example 2
const obj2 = {};
console.log(isEmpty(obj2)); // Output: true

// Example 3
const arr = [null, false, 0];
console.log(isEmpty(arr)); // Output: false

//====================================================================================================================================================================================================================================//

class Calculator {

    constructor(value) {
        this.result = value;
    }


    add(value) {
        this.result += value;
        return this;
    }


    subtract(value) {
        this.result -= value;
        return this;
    }


    multiply(value) {
        this.result *= value;
        return this;
    }


    divide(value) {
        if (value === 0) {
            throw new Error("Division by zero is not allowed");
        }
        this.result /= value;
        return this;
    }


    power(value) {
        this.result = Math.pow(this.result, value);
        return this;
    }

    getResult() {
        return this.result;
    }
}

// Example usage:
const calculator = new Calculator(10);
const result = calculator.add(5).subtract(3).multiply(2).divide(2).power(2).getResult();
console.log(result); // Output: 24

//====================================================================================================================================================================================================================================//

/**
 * @param {Function} fn
 * @param {Array} args
 * @param {number} t
 * @return {Function}
 */
var cancellable = function(fn, args, t) {
    let result = [];
    let timerId;

    function execute() {
        const diff = Math.floor(performance.now() - start);
        result.push({ time: diff, returned: fn(...args) });
        timerId = setTimeout(execute, t);
    }

    execute();

    function cancelFn() {
        clearTimeout(timerId);
    }

    return cancelFn;
};

const result = [];

const fn = (x) => x * 2;
const args = [4], t = 35, cancelTimeMs = 190;

const start = performance.now();

const log = (...argsArr) => {
    const diff = Math.floor(performance.now() - start);
    result.push({ time: diff, returned: fn(...argsArr) });
};
    
const cancel = cancellable(log, args, t);

setTimeout(cancel, cancelTimeMs);

setTimeout(() => {
    console.log(result);
    // [
    //   {"time":0,"returned":8},
    //   {"time":35,"returned":8},
    //   {"time":70,"returned":8},
    //   {"time":105,"returned":8},
    //   {"time":140,"returned":8},
    //   {"time":175,"returned":8}
    // ]
}, cancelTimeMs + t + 15);

//====================================================================================================================================================================================================================================//

var twoSum = function(nums, target) {
    let result = [];
        for(let i = 0; i<nums.length; i++){
            for(let j = 0; j<nums.length; j++){
                sum = nums[i] + nums[j];

                if(i !== j){
                    if(sum == target){
                        result.push(i);
                    }
                }
            }
            sum = 0;
        }
    return result;
};

let nums = [1,7,2, 11,15], target = 9;
const res = twoSum(nums, target);
console.log(res);


var twoSum = function(nums, target) {
  let map = new Map()
  for(let i=0;i<nums.length;i++){
      let complement = target - nums[i];
      if(map.has(complement))
        return [map.get(complement),i]
    map.set(nums[i],i)
  } 
  
};

//====================================================================================================================================================================================================================================//

var isPalindrome = function(x) {
    // Edge cases
    if (x < 0 || (x % 10 === 0 && x !== 0)) {
        return false;
    }

    // Reverse the last half of the number
    let reversedHalf = 0;
    while (x > reversedHalf) {
        reversedHalf = reversedHalf * 10 + x % 10;
        x = Math.floor(x / 10);
    }

    // If x has odd number of digits, remove the middle digit
    // as it doesn't affect palindrome check
    if (x === reversedHalf || x === Math.floor(reversedHalf / 10)) {
        return true;
    } else {
        return false;
    }
};

// Test cases
console.log(isPalindrome(121));  // Output: true
console.log(isPalindrome(-121)); // Output: false
console.log(isPalindrome(10));   // Output: false

//====================================================================================================================================================================================================================================//

var romanToInt = function(s) {
    const romanNumerals = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000,
    };

    let total = 0;
    let prevValue = 0;

    for (let i = s.length - 1; i >= 0; i--) {
        const currentValue = romanNumerals[s[i]];

        if (currentValue < prevValue) {
            total -= currentValue;
        } else {
            total += currentValue;
        }

        prevValue = currentValue;
    }

    return total;
};

// Test cases
console.log(romanToInt("III"));      // Output: 3
console.log(romanToInt("LVIII"));    // Output: 58
console.log(romanToInt("MCMXCIV"));  // Output: 1994

//====================================================================================================================================================================================================================================//

var isValid = function(s) {
    const stack = [];
    const parenthesesMap = {
        ')': '(',
        '}': '{',
        ']': '['
    };

    for (let i = 0; i < s.length; i++) {
        const char = s.charAt(i);

        if (parenthesesMap[char]) {
          
            const topElement = stack.length === 0 ? '#' : stack.pop();
            if (topElement !== parenthesesMap[char]) {
                return false;
            }
        } else {
            
            stack.push(char);
        }
    }

    return stack.length === 0;
};

//====================================================================================================================================================================================================================================//

var removeDuplicates = function(nums) {
  if (nums.length === 0) {
    return 0;
  }

  let uniqueCount = 1;
  for (let i = 1; i < nums.length; i++) {
    if (nums[i] !== nums[i - 1]) {
      nums[uniqueCount] = nums[i];
      uniqueCount++;
    }
  }

  return uniqueCount;
};




const nums1 = [1, 1, 2];
const res = removeDuplicates(nums1);
// Output: 2, nums1 = [1, 2, _]
console.log(res, nums1);

//====================================================================================================================================================================================================================================//

var removeElement = function(nums, val) {
  let nonValCount = 0;

  for (let i = 0; i < nums.length; i++) {
    if (nums[i] !== val) {
      nums[nonValCount] = nums[i];
      nonValCount++;
    }
  }

  return nonValCount;
};

// Example usage:
const nums1 = [3, 2, 2, 3];
const val1 = 3;
const k1 = removeElement(nums1, val1);
console.log(k1); // Output: 2, nums1 = [2, 2, _, _]

const nums2 = [0, 1, 2, 2, 3, 0, 4, 2];
const val2 = 2;
const k2 = removeElement(nums2, val2);
console.log(k2); // Output: 5, nums2 = [0, 1, 4, 0, 3, _, _, _]

//====================================================================================================================================================================================================================================//

