let n, result;

function solution(n) {
    if (10 <= n && n <= 99) {

        let nAsString = n.toString();

        let firstDigit = parseInt(nAsString.charAt(0));
        let secondDigit = parseInt(nAsString.charAt(1));

        result = firstDigit + secondDigit;
    } else {
        console.log("The variable is out of range.");
    }
    return result;
}

try {
    solution(12);
} catch (error) {
    console.log("An error occurred: " + error.message);
}


function solution(n) {
  const frame = [];

  // Top line
  frame.push("*".repeat(n));

  // Middle lines with spaces
  for (let i = 0; i < n - 2; i++) {
    frame.push("*" + " ".repeat(n - 2) + "*");
  }

  // Bottom line
  if (n > 1) {
    frame.push("*".repeat(n));
  }

  return frame;
}

// Example usage:
const frameSize1 = 8;
const frame1 = solution(frameSize1);
console.log(frame1);

const frameSize2 = 5;
const frame2 = solution(frameSize2);
console.log(frame2);

const frameSize3 = 2;
const frame3 = solution(frameSize3);
console.log(frame3);


function solution(logs) {
  const branches = {};

  let currentBranch = null;

  for (const log of logs) {
    const [command, arg] = log.split(' ');

    switch (command) {
      case 'switch':
        currentBranch = arg;
        break;
      case 'push':
        branches[currentBranch] = branches[currentBranch] || new Set();
        branches[currentBranch].add(arg);
        break;
    }
  }

  let maxFilesCount = 0;
  let maxFilesBranch = null;

  for (const branch in branches) {
    const filesCount = branches[branch].size;
    if (filesCount > maxFilesCount) {
      maxFilesCount = filesCount;
      maxFilesBranch = branch;
    }
  }

  return maxFilesBranch;
}

// Example usage:
const logs1 = [
  "switch branch1",
  "push file1",
  "push file2",
  "push file1",
  "switch branch2",
  "switch issue2",
  "push file1",
  "push file2",
  "push file3"
];
console.log(solution(logs1)); // Output: "issue2"

const logs2 = [
  "switch dockerUpdate",
  "push mainFile",
  "switch myissue2",
  "push configFile",
  "push configFile",
  "switch dockerUpdate",
  "push configFile"
];
console.log(solution(logs2)); // Output: "dockerUpdate"


function solution(matrix, words) {
  const numRows = matrix.length;
  const numCols = matrix[0].length;
  let count = 0;

  // Helper function to check if a word can be formed from a given position
  function canFormWord(word, row, col, dir) {
    for (let i = 0; i < word.length; i++) {
      if (
        row >= numRows ||
        col >= numCols ||
        (matrix[row][col] !== word[i] && matrix[row][col] !== undefined)
      ) {
        return false;
      }

      if (dir === 'right') {
        col++;
      } else if (dir === 'down') {
        row++;
      }
    }

    return true;
  }

  // Iterate through each cell in the matrix
  for (let row = 0; row < numRows; row++) {
    for (let col = 0; col < numCols; col++) {
      // Check if any word can be formed from the current cell
      for (const word of words) {
        if (
          canFormWord(word, row, col, 'right') ||
          canFormWord(word, row, col, 'down')
        ) {
          count++;
          break; // Move on to the next cell once a word is found
        }
      }
    }
  }

  return count;
}

// Example usage:
const matrix1 = [
  ["c", "o", "d", "g"],
  ["a", "t", "e", "r"],
  ["z", "o", "p", "s"]
];
const words1 = ["code", "signal", "coder", "cat", "dog", "top", "spot"];
console.log(solution(matrix1, words1)); // Output: 3

const matrix2 = [
  ["c", "o", "d", "e"],
  ["a", "d", "e", "a"],
  ["a", "e", "a", "a"]
];
const words2 = ["code", "signal", "f"];
console.log(solution(matrix2, words2)); // Output: 3


function solution(numbers, k) {
  const countPairs = (subarray) => {
    const frequencyMap = new Map();
    let pairsCount = 0;

    for (const num of subarray) {
      const count = frequencyMap.get(num) || 0;
      pairsCount += count;
      frequencyMap.set(num, count + 1);
    }

    return pairsCount;
  };

  let result = 0;

  for (let i = 0; i < numbers.length; i++) {
    for (let j = i; j < numbers.length; j++) {
      const subarray = numbers.slice(i, j + 1);
      const pairsCount = countPairs(subarray);

      if (pairsCount >= k) {
        result++;
      }
    }
  }

  return result;
}

// Example usage:
console.log(solution([0, 1, 0, 1, 0], 2)); // Output: 3
console.log(solution([2, 2, 2, 2, 2, 2], 3)); // Output: 1
console.log(solution([1, 3, 3, 1], 1)); // Output: 4
